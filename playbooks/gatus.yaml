---
- name: Setup gatus
  hosts: box
  become: true
  tasks:
    - name: Create Container Directory
      ansible.builtin.file:
        path: "{{ container_path }}gatus"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user_uid }}"
        group: "{{ ansible_user_gid }}"

    - name: Initialize domains array
      set_fact:
        gatus_domains: []
    - name: Add Gatus domain if enabled
      set_fact:
        gatus_domains: "{{ gatus_domains + [{'name': 'Gatus (this page)', 'url': 'https://gatus.' + domain, 'interval': '30s'}] }}"
      when: enable_service_gatus | bool
    - name: Add Vaultwarden domain if enabled
      set_fact:
        gatus_domains: "{{ gatus_domains + [{'name': 'Vaultwarden', 'url': 'https://vaultwarden.' + domain, 'interval': '30s'}] }}"
      when: enable_service_vaultwarden | bool
    - name: Display the resulting domains
      debug:
        var: gatus_domains

    - name: Jank - Touch config.yaml if it doesn't exist to silence the config_last move
      ansible.builtin.file:
        path: "{{ container_path }}gatus/config.yaml"
        state: touch
    - name: Move old config.yaml # TODO: improve this?
      ansible.builtin.command:
        cmd: mv -f {{ container_path }}gatus/config.yaml {{ container_path }}gatus/config_last.yaml
    - name: Create config.yaml
      ansible.builtin.template:
        src: "{{ gatus_conf_src }}"
        dest: "{{ destination_file_path }}"
        owner: "{{ ansible_user_uid }}"
        group: "{{ ansible_user_gid }}"
        mode: '0644'
      vars:
        destination_file_path: "{{ container_path }}gatus/config.yaml"
        gatus_conf_src: "../templates/gatus-config.yaml.j2"

    - name: Configure gatus
      community.docker.docker_container:
        name: gatus
        image: twinproduction/gatus
        restart_policy: unless-stopped
        restart: true
        security_opts:
          no-new-privileges:true
        env:
          TZ: "{{ timezone }}"
        volumes:
          "{{ container_path }}gatus:/config"
        dns_servers:
          - "{{ dns1 }}"
          - "{{ dns2 }}"
        labels:
          traefik.enable: "true"
          traefik.http.routers.gatus.rule: "Host(`gatus.{{ domain }}`)"
          traefik.http.routers.gatus.entrypoints: "https"
          traefik.http.services.gatus.loadbalancer.server.port: "8080"
          traefik.docker.network: "services"
        networks:
          - name: services

    - name: Ensure services network exists
      community.docker.docker_network:
        name: services
        state: present
